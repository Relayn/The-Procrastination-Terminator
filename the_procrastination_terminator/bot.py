import os
import telebot
from dotenv import load_dotenv
from telebot import types
from the_procrastination_terminator.tasks import Task, TaskManager, Priority
from the_procrastination_terminator.db_adapter import SQLiteAdapter
from the_procrastination_terminator.categories import WorkCategory, StudyCategory, PersonalCategory

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä TeleBot
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
db_adapter = SQLiteAdapter()
task_manager = TaskManager(db_adapter)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_temp_data = {}


class Bot:
    def __init__(self, config):
        self.config = config
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä bot
        self.bot = bot

    def start(self):
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.bot.polling(none_stop=True)


# ---------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥:

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø The Procrastination Terminator! üí™\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –±—ã—Å—Ç—Ä—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"
    )


@bot.message_handler(commands=['add'])
def add_task(message):
    bot.reply_to(
        message,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –î–∞—Ç–∞ (YYYY-MM-DD HH:MM) | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low) | –ö–∞—Ç–µ–≥–æ—Ä–∏—è (work/study/personal)"
    )
    user_temp_data[message.chat.id] = "waiting_for_task"


@bot.message_handler(func=lambda message: user_temp_data.get(message.chat.id) == "waiting_for_task")
def process_task_input(message):
    try:
        title, description, deadline, priority, category_str = map(str.strip, message.text.split("|"))
        category = {
            "work": WorkCategory(),
            "study": StudyCategory(),
            "personal": PersonalCategory()
        }.get(category_str.lower(), None)

        if not category:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å work, study –∏–ª–∏ personal.")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Task —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç deadline –≤ datetime.
        task = Task(message.chat.id, title, description, deadline, priority, category)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        task_manager.add_task(task)
        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    finally:
        user_temp_data.pop(message.chat.id, None)


@bot.message_handler(commands=['list'])
def list_tasks(message):
    tasks = task_manager.db_adapter.load_tasks(message.chat.id)
    if not tasks:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    for task in tasks:
        # task: (id, user_id, title, description, deadline, priority, category, completed)
        markup = types.InlineKeyboardMarkup()
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if not task[7]:
            complete_button = types.InlineKeyboardButton(
                text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{task[0]}"
            )
            markup.add(complete_button)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        delete_button = types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task[0]}"
        )
        markup.add(delete_button)
        status = "‚úÖ" if task[7] else "‚è≥"
        text = f"{task[2]} | {task[4]} | {status}"
        bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("complete_") or call.data.startswith("delete_"))
def callback_inline(call):
    if call.data.startswith("complete_"):
        try:
            task_id = int(call.data.split("_")[1])
            task_manager.db_adapter.cursor.execute("UPDATE tasks SET completed=1 WHERE id=?", (task_id,))
            task_manager.db_adapter.conn.commit()
            bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            bot.send_message(call.message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è!")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
    elif call.data.startswith("delete_"):
        try:
            task_id = int(call.data.split("_")[1])
            task_manager.db_adapter.cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
            task_manager.db_adapter.conn.commit()
            bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            bot.send_message(call.message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    bot.polling()
